// scripts/loader.js
// ----------------------------------------------
// –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏ –ø–æ–¥–±–æ—Ä —à–∞–±–ª–æ–Ω–æ–≤ –ø–æ YAML
// ----------------------------------------------

async function loadPresets() {
  const response = await fetch('config/presets.yaml');
  const text = await response.text();
  const config = jsyaml.load(text);
  console.log('‚úÖ YAML –∑–∞–≥—Ä—É–∂–µ–Ω', config);
  return config;
}

// –§—É–Ω–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
function findTemplates(config, { audience = [], purpose = '', tags = [] } = {}) {
  const all = config.templates || [];
  const results = all.filter(t => {
    const matchAudience = audience.some(a => t.audience?.includes(a));
    const matchTags = tags.some(tag => t.tags?.includes(tag));
    const matchPurpose = purpose
      ? Object.keys(config.auto_select.tag_style_map).some(k =>
          purpose.toLowerCase().includes(k) &&
          config.auto_select.tag_style_map[k].includes(t.style)
        )
      : true;
    return matchAudience || matchTags || matchPurpose;
  });
  return results.slice(0, 3); // top-3
}

// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è
loadPresets().then(cfg => {
  const selected = findTemplates(cfg, {
    audience: ['–∏–Ω–≤–µ—Å—Ç–æ—Ä—ã'],
    purpose: '–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –ø–∏—Ç—á',
    tags: ['ESG', '–≤–æ–¥–∞']
  });
  console.log('üéØ –ü–æ–¥—Ö–æ–¥—è—â–∏–µ —à–∞–±–ª–æ–Ω—ã:', selected);
});
